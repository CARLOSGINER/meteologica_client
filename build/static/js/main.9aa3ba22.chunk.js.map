{"version":3,"sources":["components/Chart.js","components/Widget.js","components/Header.js","components/Footer.js","App.js","index.js"],"names":["Plot","createPlotlyComponent","Plotly","globalColor","App","getLastTemp","getLastPower","useState","temperatures","setTemperatures","power","setPower","onLight","setOnLight","useEffect","socket","socketIOClient","on","resp","updatedTemperatures","updatedPowers","makeAxis","rawData","map","each","time","value","tempsInCelsius","kelvinTemperatures","toKW","MWpowers","plotReadyTemps","plotReadyPowers","lastTemperature","length","lastPower","toFixed","className","data","type","mode","x","y","layout","title","font","color","xaxis","titlefont","tickfont","tickmode","dtick","tickformat","yaxis","paper_bgcolor","plot_bgcolor","Widget","lastTemp","Header","src","alt","Footer","setLastTemp","setLastPower","Chart","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9aa3ba22.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport Plotly from 'plotly.js-basic-dist';\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\n\r\nconst Plot = createPlotlyComponent(Plotly);\r\nconst ENDPOINT = \"https://meteologica-app-server.herokuapp.com\"\r\n//to test it local \r\n// const ENDPOINT = \"http://127.0.0.1:4001\";\r\nconst globalColor = '#111d2b'\r\n\r\n\r\nfunction App({getLastTemp,getLastPower}) {\r\n\r\n    const [temperatures, setTemperatures] = useState([]);\r\n    const [power, setPower] = useState([]);\r\n    const [onLight, setOnLight] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        const socket = socketIOClient(ENDPOINT)\r\n        socket.on(\"FromAPI\", resp => {\r\n            setTemperatures(resp.updatedTemperatures);\r\n            setPower(resp.updatedPowers);\r\n            setOnLight(true);\r\n        });\r\n        socket.on(\"disconnect\", () => {\r\n            setOnLight(false);\r\n          });\r\n    }, []);\r\n\r\n\r\n    const makeAxis = (rawData) =>{\r\n        const xAxis = rawData.map((each)=>(\r\n            each.time\r\n        ))\r\n        const yAxis = rawData.map((each)=>(\r\n            each.value\r\n        ))\r\n\r\n        const plotData = [xAxis,yAxis]\r\n\r\n        return plotData;\r\n    }\r\n\r\n    const tempsInCelsius =(kelvinTemperatures) =>{\r\n        const convertedTemperatures = kelvinTemperatures.map(each=>{\r\n            const celsius = each - 273.15\r\n            return (celsius)\r\n        })\r\n        return convertedTemperatures\r\n    }\r\n\r\n    const toKW = (MWpowers) =>{\r\n        const KWpowers= MWpowers.map(each=>{\r\n            return each*1000\r\n        })\r\n        return KWpowers\r\n    }\r\n\r\n    let plotReadyTemps = tempsInCelsius(makeAxis(temperatures)[1])\r\n    let plotReadyPowers = toKW(makeAxis(power)[1])\r\n    let lastTemperature = typeof plotReadyTemps[plotReadyTemps.length-1] === \"undefined\"? 0 : plotReadyTemps[plotReadyTemps.length-1]  ; \r\n    let lastPower = typeof plotReadyPowers[plotReadyPowers.length-1] === \"undefined\"? 0 : plotReadyPowers[plotReadyPowers.length-1]; \r\n    getLastTemp(lastTemperature.toFixed(2))\r\n    getLastPower(lastPower.toFixed(2))\r\n\r\n\r\n  return (\r\n\r\n    <>\r\n\r\n        <div className={onLight?\"loader active\":\"loader\"}>\r\n            {onLight?<p>Connected! receiving data</p>:<p>Disconnected...</p>}\r\n        </div>\r\n\r\n        <div className=\"charts\">\r\n\r\n            <Plot\r\n                data={[\r\n                    {\r\n                        type:'scatter',\r\n                        mode:'lines',\r\n                        x:makeAxis(temperatures)[0],\r\n                        y:tempsInCelsius(makeAxis(temperatures)[1])\r\n                    }\r\n                ]}\r\n\r\n                layout={{\r\n                    title:'Temperature',\r\n                    font:{\r\n                        color:'rgb(179, 179, 179)'\r\n                    },\r\n                    xaxis:{\r\n                        title:'Time',\r\n                        titlefont:{color:'white'},\r\n                        tickfont:{color:'white'},\r\n                        tickmode:'linear',\r\n                        dtick:12,\r\n                        tickformat:'%M'\r\n                    },\r\n                    yaxis:{\r\n                        title:'Temp (C°)',\r\n                        titlefont:{color:'white'},\r\n                        tickfont:{color:'white'}\r\n                    },\r\n                    paper_bgcolor:globalColor,\r\n                    plot_bgcolor:globalColor,\r\n                }}\r\n            />\r\n            <Plot\r\n                data={[\r\n                    {\r\n                        type:'scatter',\r\n                        mode:'lines',\r\n                        x:makeAxis(power)[0],\r\n                        y:toKW(makeAxis(power)[1]),\r\n                    }\r\n                ]}\r\n                layout={{\r\n                    title:'Power',\r\n                    font:{\r\n                        color:'rgb(179, 179, 179)'\r\n                    },\r\n                    xaxis:{\r\n                        title:'Time',\r\n                        titlefont:{color:'white'},\r\n                        tickfont:{color:'white'},\r\n                        tickmode:'linear',\r\n                        dtick:12,\r\n                        tickformat:'%M'\r\n                    },\r\n                    yaxis:{\r\n                        title:'Power (KW)',\r\n                        titlefont:{color:'white'},\r\n                        tickfont:{color:'white'}\r\n                    },\r\n                    paper_bgcolor:globalColor,\r\n                    plot_bgcolor:globalColor,\r\n\r\n                }}\r\n            />\r\n        </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\n\r\n\r\nexport default function Widget({lastTemp,lastPower}) {\r\n    return (\r\n      <div className=\"widget\">\r\n          <div >\r\n              <p className=\"subtitle\">Last Temperature</p>\r\n              <p className=\"number\">{lastTemp} °C</p>\r\n          </div>\r\n          <div className=\"divider\">\r\n              |\r\n          </div>\r\n          <div>\r\n              <p className=\"subtitle\">Last Power</p>\r\n              <p className=\"number\" >{lastPower} KW</p>\r\n          </div>\r\n      </div>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Widget from './Widget';\r\n\r\nexport default function Header({lastTemp,lastPower}) {\r\n    return (\r\n        <nav className=\"header\">\r\n            <img className=\"logo_img\" src={\"/assets/meteologica_logo.jpg\"} alt=\"logo\" />\r\n            <Widget lastTemp={lastTemp} lastPower={lastPower}/>\r\n        </nav>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <footer>\r\n            <p className=\"copyright\">Develope by Carlos Giner © copyright 2021</p>\r\n        </footer>\r\n    )\r\n}\r\n","import './App.css';\nimport React,{useState} from'react';\nimport Chart from './components/Chart';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nfunction App() {\n\n  const [lastTemp, setLastTemp] = useState(false);\n  const [lastPower, setLastPower] = useState(false);\n\n  const getLastTemp =(lastTemperature)=>{\n    setLastTemp(lastTemperature)\n  }\n\n  const getLastPower = (lastPower) => {\n    setLastPower(lastPower);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header lastTemp={lastTemp} lastPower={lastPower}/> \n      <Chart getLastTemp={getLastTemp} getLastPower={getLastPower} />\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}